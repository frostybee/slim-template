{
  // Place your slim-mvc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "This keyword": {
    "prefix": "dis",
    "body": "$$this->${0}",
    "description": "Insert $this-> keyword in PHP"
  },
  "Short Echo Var": {
    "prefix": "hse_var",
    "body": "<?= $${1:var}?>",
    "description": "Insert short echo var <?= $var ?> in HTML"
  },
  "Short Echo expression": {
    "prefix": "hse_expr",
    "body": "<?= ${1:expression}?>",
    "description": "Insert short echo expression <?= expression ?> in HTML"
  },
  "HTML Special Chars": {
    "prefix": "h_hschars",
    "body": "<?= hs($${1:var}) ?>",
    "description": "Insert htmlspecialchars wrapper function call <?= hs($var) ?> in HTML"
  },
  "Dump and Die": {
    "prefix": "dd",
    "body": "dd($${1:var});",
    "description": "Insert a dd function call: dump data and stop execution."
  },
  "Render Template": {
    "prefix": "render",
    "body": "return $$this->render($$response, '${1:viewName.php}', $${2:data});",
    "description": "Insert a render view statement in a controller method"
  },

  "Include Template": {
    "prefix": "inc",
    "body": "<?php include '${1:template}.php'; ?>",
    "description": "PHP include in statement"
  },

  "Require File": {
    "prefix": "req",
    "body": "<?php require_once '${1:filename}.php'; ?>",
    "description": "PHP require once statement."
  },

  "Function Declaration": {
    "prefix": "fn",
    "body": "function ${1:functionName}(${2:parameters}) {\n\t${3:// code}\n}",
    "description": "PHP function declaration"
  },
  "If Statement in HTML": {
    "prefix": "hif",
    "body": "<?php if (${1:condition}): ?>\n\t${2:// code}\n<?php endif; ?>",
    "description": "Insert a PHP if statement in HTML"
  },

  "If Else Statement": {
    "prefix": "hifel",
    "body": "<?php if (${1:condition}): ?>\n\t${2:// code}\n<?php else: ?>\n\t${3:// else code}\n<?php endif; ?>",
    "description": "Insert a PHP if-else statement in HTML"
  },

  "ElseIf Statement": {
    "prefix": "helseif",
    "body": "<?php elseif (${1:condition}): ?>",
    "description": "Insert a PHP elseif statement in HTML"
  },

  "Switch Statement": {
    "prefix": "hswitch",
    "body": "<?php switch (${1:variable}): ?>\n\t<?php case ${2:value}: ?>\n\t\t${3:// code}\n\t\t<?php break; ?>\n\t<?php default: ?>\n\t\t${4:// default code}\n<?php endswitch; ?>",
    "description": "Insert a PHP switch statement in HTML"
  },

  "For Loop": {
    "prefix": "hfor",
    "body": "<?php for ($${1:i} = ${2:0}; $${1} < ${3:count}; $${1}++): ?>\n\t${4:// code}\n<?php endfor; ?>",
    "description": "Insert a 0-index PHP for loop in HTML"
  },

  "Foreach Loop": {
    "prefix": "hforeach",
    "body": "<?php foreach (${1:array} as ${2:key} => ${3:value}): ?>\n\t${4:// code}\n<?php endforeach; ?>",
    "description": "Insert a PHP foreach loop in HTML"
  },

  "While Loop": {
    "prefix": "hwhile",
    "body": "<?php while (${1:condition}): ?>\n\t${2:// code}\n<?php endwhile; ?>",
    "description": "Insert a PHP while loop in HTML"
  },

  "Class Declaration": {
    "prefix": "class",
    "body": "class ${1:ClassName} {\n\tpublic function __construct($${2:args}) {\n\t\t${3:// constructor}\n\t}\n\n\t${4:// methods}\n}",
    "description": "PHP class declaration"
  },

  "Namespace Declaration": {
    "prefix": "namespace",
    "body": "namespace ${1:Namespace};",
    "description": "PHP namespace declaration"
  },

  "Use Statement": {
    "prefix": "use",
    "body": "use ${1:Some\\Namespace\\Class};",
    "description": "PHP use statement"
  },

  "DocBlock": {
    "prefix": "doc",
    "body": "/**\n * ${1:Description}\n *\n * @param ${2:type} $${3:param}\n * @return ${4:void}\n */",
    "description": "PHPDoc block"
  },

  "Return Statement": {
    "prefix": "return",
    "body": "return ${1:expression};",
    "description": "PHP return statement"
  },

  "Array Declaration": {
    "prefix": "arr",
    "body": "$${1:array_name} = [${2:values}]",
    "description": "PHP short array"
  },

  "Print Statement": {
    "prefix": "print_r",
    "body": "print_r($${1:expression});",
    "description": "PHP print statement"
  },

  "Echo Statement": {
    "prefix": "echo_expr",
    "body": "echo ${1:expression};",
    "description": "PHP echo statement"
  },
  "Echo Var Statement": {
    "prefix": "echo_var",
    "body": "echo $${1:expression};",
    "description": "PHP echo variable statement"
  },
  // If statement (ternary operator style)
  "Ternary Operator": {
    "prefix": "ternary",
    "body": "$${1:var} = ${2:condition} ? ${3:trueValue} : ${4:falseValue};",
    "description": "PHP ternary operator"
  },

  "Null Coalescing": {
    "prefix": "coalesce",
    "body": "$${1:var} = ${2:variable} ?? ${3:defaultValue};",
    "description": "PHP null coalescing operator"
  }
}
